import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import numpy as np
import csv
import os
import warnings 
warnings.filterwarnings("ignore")
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_validate
from sklearn.model_selection import cross_val_score, GridSearchCV
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import precision_recall_curve




# Get the diabete data and put it in  Data :
data=pd.read_csv('C:\\Users\\amerr\\Downloads\\datasets\\diabetes.csv')
## Take a Quick Look at the Data Structure
data.head()

data.shape
data.info()

data['Outcome'].value_counts()
data.groupby('Outcome').mean()
# separating the data and labels
X = data.drop(columns = 'Outcome', axis=1)
Y = data['Outcome']
print(X)
print(Y)
scaler = StandardScaler()
scaler.fit(X)
standardized_data = scaler.transform(X)
print(standardized_data)
%matplotlib inline
import matplotlib.pyplot as plt
data.hist(bins=50, figsize=(20,15))
plt.show()
## lets see the relation between Glucose and age , beacause the Glucose and Insulin is essiantial reason for diabets
data.plot(kind="scatter", x="Age", y="Glucose", alpha=0.5)

# Perform the grid search for Random Forest
grid_search_random_forest = GridSearchCV(random_forest, param_grid_random_forest, cv=5)  # GridSearchCV with the Random Forest model
grid_search_random_forest.fit(X_train, Y_train)  
best_params_random_forest = grid_search_random_forest.best_params_  
best_score_random_forest = grid_search_random_forest.best_score_  
accuracy_random_forest = grid_search_random_forest.score(X_test, Y_test)  # Calculate accuracy on the test data

print("Random Forest Accuracy:", accuracy_random_forest)
#Random Forest Accuracy: 0.7597402597402597
